name: "CI"

on:
  workflow_dispatch:
    inputs:
      packageVersion:
        description: 'Nuget package version'     
        required: false
        default: '1.0.0'
  # push:
  #   branches: 
  #   - main
#   release:
#     types:
#       - created
#     inputs:
#       tag:
#         description: 'tag of the release'  

env:
  PROJECT_PATH: 'Artnix.Scheduler/Artnix.Scheduler.sln'
  PACKAGE_OUTPUT_DIRECTORY: ${{ github.workspace }}\output
  NUGET_SOURCE_URL: 'https://api.nuget.org/v3/index.json'

jobs:
  deploy:
    name: 'Deploy'
    runs-on: 'windows-latest'
    steps:
    - name: 'Checkout'
      uses: actions/checkout@v2

    - name: 'Install dotnet'
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '3.1.x'

    - name: 'Restore packages'
      run: dotnet restore ${{ env.PROJECT_PATH }}

    - name: 'Build project'
      run: dotnet build ${{ env.PROJECT_PATH }} --no-restore --configuration Release

    - name: 'command param generation'
      id: command-param-gen
      run: echo "::set-output name=PARAMS::--no-restore --no-build --configuration Release -p:PackageVersion=${{ github.event.inputs.packageVersion }} --output ${{ env.PACKAGE_OUTPUT_DIRECTORY }}"
      
    - name: 'Pack'
      run: | 
        dotnet pack 'Artnix.Scheduler/Artnix.Scheduler/Artnix.Scheduler.csproj' ${{ steps.command-param-gen.outputs.PARAMS }} 
        dotnet pack 'Artnix.Scheduler/Artnix.Scheduler.DependencyInjection/Artnix.Scheduler.DependencyInjection.csproj' ${{ steps.command-param-gen.outputs.PARAMS }}

    - name: Archive NuGet packages to Artifacts
      uses: actions/upload-artifact@v1
      with:
        name: Pack GitActionsTestApp
        path: ${{ env.PACKAGE_OUTPUT_DIRECTORY }}/

    - name: 'Push'
      run: | 
        dotnet nuget push ${{ env.PACKAGE_OUTPUT_DIRECTORY }}/Artnix.Scheduler.${{ github.event.inputs.packageVersion }}.nupkg --api-key ${{ secrets.NUGET_AUTH_TOKEN }} --source ${{ env.NUGET_SOURCE_URL }}
        dotnet nuget push ${{ env.PACKAGE_OUTPUT_DIRECTORY }}/Artnix.Scheduler.DependencyInjection.${{ github.event.inputs.packageVersion }}.nupkg --api-key ${{ secrets.NUGET_AUTH_TOKEN }} --source ${{ env.NUGET_SOURCE_URL }}
